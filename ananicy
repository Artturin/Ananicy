#!/bin/bash
################################################################################
# Ananicy - is Another auto nice daemon, with community rules support
# Configs are placed under /etc/ananicy.d/

################################################################################
# Define some fuctions
INFO(){ echo -n "INFO: "; echo "$@" ;}
WARN(){ echo -n "WARN: "; echo "$@" ;}
ERRO(){ echo -n "ERRO: "; echo "$@" ; exit 1;}
rm_w(){ [ -f "$1" ] && rm "$1"; }
################################################################################
# Check DIR_CONFIGS
DIR_CONFIGS=/etc/ananicy.d/
INFO "Check $DIR_CONFIGS dir"
[ -d "$DIR_CONFIGS" ] || ERRO "Config dir $DIR_CONFIGS doesn't exist!"

TMP="$(mktemp)"

WORK_DIR=/run/ananicy/
mkdir -p "$WORK_DIR"
cd "$WORK_DIR" || exit 1

mkdir -p "TYPES_CACHE"

## Dedup/Save Types
INFO "Read types"
find -P $DIR_CONFIGS -name "*.types" -type f | \
while read -r config; do
    line_number=0
    # remove comments       | remove unsafe symbols
    INFO "Parse $config"
    cut -d'#' -f1 "$config" | tr -d '`$)(' | \
    while read -r LINE; do
        line_number=$(($line_number+1))
        [ -z "$LINE" ] && continue
        echo "$LINE" > "$TMP"
        source "$TMP"
        [ -z "$TYPE" ] && ERRO "$config:$line_number TYPE are empty!"
        echo "$LINE" > "TYPES_CACHE/$TYPE"
    done
done

rm_w "$TMP"

mkdir -p "RULE_CACHE_TMP"

TMP="$(mktemp)"

## Dedup rules
INFO "Read rules"
find -P $DIR_CONFIGS -name "*.rules" -type f | \
while read -r config; do
    line_number=0
    INFO "Parse $config"
    # remove comments       | remove unsafe symbols
    cut -d'#' -f1 "$config" | tr -d '`$)(' | \
    while read -r LINE; do
        line_number=$(($line_number+1))
        [ -z "$LINE" ] && continue
        echo "$LINE" > "$TMP"
        source "$TMP"
        [ -z "$NAME" ] && \
            ERRO "$config:$line_number NAME are empty!"
        if [ -z "$TYPE" ]; then
            echo "$LINE" > "RULE_CACHE_TMP/$NAME"
        else
            echo "$LINE $(cat TYPES_CACHE/$TYPE)" > "RULE_CACHE_TMP/$NAME"
        fi
    done
done
[ "3" == "$(ls -al RULE_CACHE_TMP/ | wc -l)" ] && ERRO "Config dir: $DIR_CONFIGS are empty!"

rm_w "$TMP"

## Compile rules
INFO "Compile rules to cache"
mkdir -p "RULE_CACHE"
for file in RULE_CACHE_TMP/*; do
    unset NICE IOCLASS IONICE SCHED OOM_SCORE_ADJ
    DO_SOMETHING=0
    source "$file"
    # Check if rule do something
    [ ! -z "$NICE" ] && {
        if [[ "$NICE" -gt 19 ]] || [[ -20 -gt "$NICE" ]]; then
            WARN "Nice must be in range -20..19, rule ignored: $(cat "$file")"
            continue
        fi
        DO_SOMETHING=1
    }


    [ ! -z "$IONICE" ] && {
        [[ $IONICE =~ [0-7] ]] || {
            WARN "IOnice/IOprio allowed only in range 0-7, rule ignored: $(cat "$file")"
            continue
        }
        DO_SOMETHING=1
    }

    [ ! -z "$IOCLASS" ] && {
        [[ $IOCLASS =~ (idle|realtime|best-effort) ]] || {
            WARN "IOclass (case sensitive) support only (idle|realtime|best-effort), rule ignored: $(cat "$file")"
            continue
        }
        DO_SOMETHING=1
    }

    if [ "$IOCLASS" == "idle" ] && [ ! -z $IONICE ]; then
        WARN "IOnice can't use IOclass idle + ionice/ioprio, rule ignored: $(cat "$file")"
        continue
    fi

    [ ! -z "$SCHED" ] && {
        [[ $SCHED =~ (batch|deadline|fifo|idle|other|rr|iso) ]] || {
            WARN "Sched (case sensitive) support only (batch|deadline|fifo|idle|other|rr|iso), rule ignored: $(cat "$file")"
            continue
        }
        DO_SOMETHING=1
    }

    [ ! -z "$OOM_SCORE_ADJ" ] && {
        if [[ "$OOM_SCORE_ADJ" -gt 1000 ]] || [[ -1000 -gt "$OOM_SCORE_ADJ" ]]; then
            WARN "OOM_SCORE_ADJ must be in range -1000..1000, rule ignored: $(cat "$file")"
            continue
        fi
        DO_SOMETHING=1
    }

    [ "$DO_SOMETHING" != "0" ] && mv "$file" "RULE_CACHE/$NAME"
done

rm -rf RULE_CACHE_TMP

[ "3" == "$(ls -al RULE_CACHE/ | wc -l)" ] && ERRO "No rule is enabled!"

INFO "Initialization completed"
echo "---"

################################################################################
# Show cached information
show_rules(){
    INFO "Print compiled rules"
    sort RULE_CACHE/* | column -t
}

show_types(){
    INFO "Print compiled types"
    sort TYPES_CACHE/* | column -t
}

################################################################################
# Helper for wrapper_renice()
nice_of_pid(){
    # 19 column in stat is a nice
    # But in some cases (name of process have a spaces)
    # It's break so.. use long solution
    [ -f /proc/$1/stat ] || return 1
    stat=( $(sed 's/) . /:/g' /proc/$1/stat 2> /dev/null | cut -d':' -f2) )
    echo ${stat[15]}
}

################################################################################
# Nice handler for pid
wrapper_renice(){
    NAME="$1" PID="$2" NICE="$3"; [ -z $NICE ] && return
    C_NICE=$(nice_of_pid $PID);   [ -z "$C_NICE" ] && return
    [ "$C_NICE" == "$NICE" ] && return
    renice -n $NICE -p $PID &> /dev/null || return
    INFO "Process ${NAME}[$PID] cpu nice: $C_NICE -> $NICE"
}

################################################################################
# Helpers for wrapper_ionice
ioclass_of_pid(){ ionice -p $1 2> /dev/null | cut -d':' -f1; }
ionice_of_pid(){  ionice -p $1 2> /dev/null | cut -d':' -f2 | tr -d ' prio'; }

################################################################################
# IONice handlers for pid
wrapper_ionice(){
    NAME="$1" PID="$2" IONICE="$3"; [ -z "$IONICE" ] && return
    C_IONICE=$(ionice_of_pid $PID); [ -z "$C_IONICE" ] && return
    [ "$C_IONICE" == "$IONICE" ] && return
    ionice -n "$IONICE" -p "$PID" &> /dev/null || return
    INFO "Process ${NAME}[$PID] ionice: $C_IONICE -> $IONICE"
}

wrapper_ionice_class(){
    NAME="$1" PID="$2" IOCLASS="$3";  [ -z "$IOCLASS" ] && return
    C_IOCLASS=$(ioclass_of_pid $PID); [ -z "$C_IOCLASS" ] && return
    [[ "$C_IOCLASS" =~ $IOCLASS ]] && return
    ionice -c "$IOCLASS" -p "$PID" &> /dev/null || return
    INFO "Process ${NAME}[$PID] ioclass: $C_IOCLASS -> $IOCLASS"
}

## Helper for get OOM_SCORE_ADJ of process
oom_score_adj_of_pid(){ cat /proc/$1/oom_score_adj; }
wrapper_oom_score_adj(){
    NAME="$1" PID="$2" OOM_SCORE_ADJ="$3";  [ -z "$OOM_SCORE_ADJ" ] && return
    C_OOM_SCORE_ADJ="$(oom_score_adj_of_pid $PID)"; [ -z "$C_OOM_SCORE_ADJ" ] && return
    [[ "$C_OOM_SCORE_ADJ" == "$OOM_SCORE_ADJ" ]] && return
    echo $OOM_SCORE_ADJ > /proc/$PID/oom_score_adj || return
    INFO "Process ${NAME}[$PID] ioclass: $C_OOM_SCORE_ADJ -> $OOM_SCORE_ADJ"
}

schedtool_policy_of_pid(){ schedtool $1 2> /dev/null | grep POLICY | cut -d ':' -f3 | cut -d ' ' -f2 | tr -d ' '; }

################################################################################
# schedtool handler for pid
wrapper_schedtool_policy(){
    NAME="$1" PID="$2" SCHED="$3" L_PRIO=0; [ -z "$SCHED" ] && return
    C_SCHED=$(schedtool_policy_of_pid $PID)
    C_SCHED="${C_SCHED//SCHED_/}"   # Remove 'SCHED_' prefix
    C_SCHED="${C_SCHED,,}"          # Upper case to lower case
    [ -z "$C_SCHED" ] && return
    [[ "$SCHED" =~ $C_SCHED ]] && return
    [[ "$SCHED" =~ other ]] && [[ "$C_SCHED" =~ normal ]] && return
    [[ "$SCHED" =~ idle ]] && [[ "$C_SCHED" =~ idleprio ]] && return
    [[ "$SCHED" =~ (rr|fifo) ]] && L_PRIO=1
    [[ "$SCHED" =~ (other|normal) ]] && SCHEDARGUMENT="-N"
    [[ "$SCHED" =~ fifo ]] && SCHEDARGUMENT="-F"
    [[ "$SCHED" =~ rr ]] && SCHEDARGUMENT="-R"
    [[ "$SCHED" =~ batch ]] && SCHEDARGUMENT="-B"
    [[ "$SCHED" =~ iso ]] && SCHEDARGUMENT="-I"
    [[ "$SCHED" =~ idle ]] && SCHEDARGUMENT="-D"

    schedtool $SCHEDARGUMENT -p $L_PRIO $PID &> /dev/null || return
    INFO "Process ${NAME}[$PID] sched: $C_SCHED -> $SCHED"
}

check_root_rights(){ [ "$UID" == "0" ] || ERRO "Script must be runned as root!"; }

check_schedulers(){
    for disk_path in /sys/class/block/*; do
        disk_name=$(basename $disk_path)
        [[ "$disk_name" =~ 'loop' ]] && continue
        [[ "$disk_name" =~ 'ram'  ]] && continue
        scheduler_path="$disk_path/queue/scheduler"
        [ ! -f $scheduler_path ] && continue
        grep -q '\[cfq\]\|\[bfq\]' $scheduler_path || \
            WARN "Disk $disk_name not used cfq/bfq scheduler IOCLASS/IONICE will not work on it!"
    done
}

check_bins(){
    bin_exist(){ command -v "$1" &> /dev/null || ERRO "Missing ${1}!"; }
    for bin in find pgrep renice ionice schedtool; do
        bin_exist $bin
    done
}

show_help(){
    echo "Usage: ananicy [options]"
    echo "  start         Run script"
    echo "  stop          Stop script"
    echo "  dump rules    Generate and print rules cache to stdout"
    echo "  dump types    Generate and print types cache to stdout"
}

main_process(){
    for file in RULE_CACHE/*; do
        unset NAME NICE IOCLASS IONICE SCHED OOM_SCORE_ADJ
        [ ! -f "$file" ] && continue
        source "$file"
        NAME="${NAME//\"/}"
        for PID in $( pgrep -w "$NAME" ); do
            [ -z "$PID" ] && continue
            [ ! -d "/proc/$PID" ] && continue
            [ ! -z "$NICE" ]    && wrapper_renice       "$NAME" "$PID" "$NICE" &
            [ ! -z "$IOCLASS" ] && wrapper_ionice_class "$NAME" "$PID" "$IOCLASS" &
            [ ! -z "$IONICE" ]  && wrapper_ionice       "$NAME" "$PID" "$IONICE" &
            [ ! -z "$SCHED" ]   && wrapper_schedtool_policy  "$NAME" "$PID" "$SCHED" &
            [ ! -z "$OOM_SCORE_ADJ" ] && wrapper_oom_score_adj "$NAME" "$PID" "$OOM_SCORE_ADJ" &
            wait
        done
    done
}

################################################################################
# Main process
case $1 in
    start)
        check_root_rights
        check_schedulers
        check_bins
        INFO "Start main process"
        RUN_FREQ=${RUN_FREQ:-15}
        while sleep $RUN_FREQ; do
            [ ! -d "$WORK_DIR" ] && break
            main_process;
        done
    ;;
    stop)
        check_root_rights
        rm -rf "$WORK_DIR"
    ;;
    dump)
        case "$2" in
            rules) show_rules;;
            types) show_types;;
        esac
    ;;
    *) show_help ;;
esac
